generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id           String          @id @default(cuid())
  email        String          @unique
  password     String
  role         Role            @default(SHIPPER)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  truckerProfile TruckerProfile?

  loads         Load[]           @relation("ShipperLoads")    

  matchesAsTrucker Match[]      @relation("TruckerMatches")
  matchesAsShipper Match[]      @relation("ShipperMatches")

  reviewsWritten Review[]       @relation("WrittenReviews")
  reviewsReceived Review[]      @relation("ReceivedReviews")

  chatRooms     ChatRoomUser[]
  locations     Location[]
  messagesSent  Message[]
}

model TruckerProfile {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
  vehicleType  String
  licenseId    String
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Load {
  id            String   @id @default(cuid())
  shipper       User     @relation("ShipperLoads", fields: [shipperId], references: [id])
  shipperId     String
  origin        String
  destination   String
  weight        Float
  budget        Float
  deadline      DateTime
  description   String?
  status        LoadStatus  @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  matches       Match[]
}
model Match {
  id            String   @id @default(cuid())

  load          Load     @relation(fields: [loadId], references: [id])
  loadId        String

  trucker       User     @relation("TruckerMatches", fields: [truckerId], references: [id])
  truckerId     String

  shipper       User     @relation("ShipperMatches", fields: [shipperId], references: [id])
  shipperId     String

  status        MatchStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  chatRoom      ChatRoom?
}


model ChatRoom {
  id            String       @id @default(cuid())
  match         Match        @relation(fields: [matchId], references: [id])
  matchId       String       @unique
  messages      Message[]
  participants  ChatRoomUser[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model ChatRoomUser {
  id          String    @id @default(cuid())
  chatRoom    ChatRoom  @relation(fields: [chatRoomId], references: [id])
  chatRoomId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  joinedAt    DateTime  @default(now())
}

model Message {
  id          String    @id @default(cuid())

  chatRoom    ChatRoom  @relation(fields: [chatRoomId], references: [id])
  chatRoomId  String

  sender      User      @relation(fields: [senderId], references: [id])
  senderId    String

  content     String
  sentAt      DateTime  @default(now())
}

model Review {
  id          String    @id @default(cuid())

  reviewer    User      @relation("WrittenReviews", fields: [reviewerId], references: [id])
  reviewerId  String

  target      User      @relation("ReceivedReviews", fields: [targetId], references: [id])
  targetId    String

  rating      Int       @default(5) // 1 to 5
  comment     String?

  createdAt   DateTime  @default(now())
}

model Location {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  latitude    Float
  longitude   Float
  recordedAt  DateTime  @default(now())
}

enum Role {
  SHIPPER
  TRUCKER
  ADMIN
}

enum LoadStatus {
  PENDING
  ACCEPTED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}
