generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  name          String
  role          Role
  balance       Float    @default(0.0)
  truckerProfile TruckerProfile?
  loads         Load[]
  truckerMatches Match[]  @relation("truckerMatches")
  shipperMatches Match[]  @relation("shipperMatches")
  reviewsGiven   Review[] @relation("ReviewsGiven")
  reviewsReceived Review[] @relation("ReviewsReceived")
  createdAt     DateTime @default(now())
}

model TruckerProfile {
  id         String @id @default(cuid())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id])
  vehicleType String
  licenseId   String
  verified    Boolean @default(false)
}

enum Role {
  SHIPPER
  TRUCKER
  ADMIN
}

model Address {
  id         String @id @default(cuid())
  address    String
  city       String
  province   String
  postalCode String
  country    String
  originLoads      Load[] @relation("OriginAddress")
  destinationLoads Load[] @relation("DestinationAddress")
}

model Load {
  id                        String     @id @default(cuid())
  shipperId                 String
  shipper                   User       @relation(fields: [shipperId], references: [id])
  originId                  String
  origin                    Address    @relation("OriginAddress", fields: [originId], references: [id])
  destinationId             String
  destination               Address    @relation("DestinationAddress", fields: [destinationId], references: [id])
  weight                    Float
  budget                    Float
  deadline                  DateTime
  description               String?
  status                    LoadStatus @default(PENDING)
  shipperInTransitConfirmed Boolean    @default(false)
  truckerInTransitConfirmed Boolean    @default(false)
  createdAt                 DateTime   @default(now())
  matches                   Match[]
  reviews                   Review[]
}

model Match {
  id        String   @id @default(cuid())
  loadId    String
  truckerId String
  shipperId String
  status    String
  createdAt DateTime @default(now())
  load      Load     @relation(fields: [loadId], references: [id], onDelete: Cascade)
  trucker   User     @relation("truckerMatches", fields: [truckerId], references: [id])
  shipper   User     @relation("shipperMatches", fields: [shipperId], references: [id])
}

model Review {
  id          String   @id @default(cuid())
  loadId      String
  @@unique([loadId, reviewerId, reviewedId])
  load        Load     @relation(fields: [loadId], references: [id], onDelete: Cascade)
  reviewerId  String
  reviewer    User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewedId  String
  reviewed    User     @relation("ReviewsReceived", fields: [reviewedId], references: [id])
  rating      Int      @default(5)
  comment     String?
  createdAt   DateTime @default(now())
}

enum LoadStatus {
  PENDING
  MATCHED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}